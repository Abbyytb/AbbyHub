local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local StartCastFishing = game:GetService("ReplicatedStorage").RemoteEvents.StartCastFishing
local StopFishing = game:GetService("ReplicatedStorage").RemoteEvents.StopFishing
local Toggle = false

local Window = Fluent:CreateWindow({
    Title = "    <Abby Hub>    " .. Fluent.Version,
    SubTitle = "by Abby, xKq",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.K
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Farming = Window:AddTab({ Title = "Farming", Icon = "coins" }),
    Bosses = Window:AddTab({ Title = "Bosses", Icon = "skull" }),
    Minigames = Window:AddTab({ Title = "Minigames", Icon = "gamepad" }),
    Hatching = Window:AddTab({ Title = "Hatching", Icon = "egg" }),
    Extra = Window:AddTab({ Title = "Extra", Icon = "plus" }),
    Webhook = Window:AddTab({ Title = "Webhook", Icon = "link" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Credits = Window:AddTab({ Title = "Credits", Icon = "users" }),
}



local function AddCenteredBorderedParagraph(tab, title, content)
    local paragraph = tab:AddParagraph({
        Title = title,
        Content = content,
        TextAlign = "Center",
        Bordered = true,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0.8, 0, 0, 100),
        Block = true
    })
    return paragraph
end

local updatesParagraph = AddCenteredBorderedParagraph(Tabs.Main, "Updates", "All Updates\n[+] Bosses \n[+] Auto CubeDrop \n[+] Auto Shrines (wait 10 Seconds to Apply) \n[+] Added Hatching \n[+] Auto Elixir/Powerup")


-- Add Auto Cube toggle
local AutoCubeToggle = Tabs.Extra:AddToggle("Auto Cube", { Title = "Cube Drop / WORKS ONLY IN ARCADE", Default = false })
AutoCubeToggle:OnChanged(function()
    if AutoCubeToggle.Value == true then
        coroutine.wrap(function()
            while AutoCubeToggle.Value == true do
                local args = { [1] = "PlayCubeDrop" }
                game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args))
                wait(0.6)
            end
        end)()
    end
end)

-- Add auto hatching
local Eggs = game:GetService("ReplicatedStorage").Assets.Eggs
local Dropdown = Tabs.Hatching:AddDropdown("SelectedEgg", {
    Title = "Auto Egg",
    Values = {"Mystery Egg", "Elite Mystery Egg", "Prismatic Egg"},
    Multi = true,
    Default = {}
})
Dropdown:OnChanged(function(selectedValue)
    print("Selected egg:", selectedValue)
    -- Add logic here to handle the selected egg
end)
local Toggle = Tabs.Hatching:AddToggle("AutoEgg", {Title = "Auto Hatching", Default = false })
Toggle:OnChanged(function()
    if Fluent.Options.AutoEgg.Value == true then
        coroutine.wrap(function()
            while Fluent.Options.AutoEgg.Value == true and task.wait(1) do 
                local Value = Fluent.Options.SelectedEgg.Value
                local args = {
                    [1] = "TryHatchEgg",
                    [2] = Value
                }
                game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args))
            end
        end)()
    end
end)

-- Add auto shrines
local Toggle = Tabs.Extra:AddToggle("AutoShrines", {Title = "Auto Shrines", Default = false })
Toggle:OnChanged(function()
    if Fluent.Options.AutoShrines.Value == true then
        coroutine.wrap(function()
            while Fluent.Options.AutoShrines.Value == true and task.wait(5) do 
                for _, v in pairs(workspace:WaitForChild("Shrines"):GetChildren()) do 
                    local args = {
                        [1] = "UseShrine",
                        [2] = v.Name
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                    task.wait(0.25)
                end
            end
        end)()
    end
end)



local function ActivateSelectedBuffs(buffs)
    for _, buff in ipairs(buffs) do
        local args = {
            [1] = "UsePowerup",
            [2] = buff
        }
        local success, error_message = pcall(function()
            game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
        end)
        if not success then
            warn("Error while triggering powerup:", error_message)
        end
    end
end

local function AutoActivateBuffs(selectedBuffs)
    while true do
        ActivateSelectedBuffs(selectedBuffs)
        wait(300) -- Wait for 5 minutes before triggering again
    end
end

local Dropdown = Tabs.Extra:AddDropdown("SelectedBuffs", {
    Title = "Select Buffs",
    Description = "Choose buffs to activate",
    Values = {"Coin Elixir", "Gamer Elixir", "Lucky Elixir", "Prismatic Elixir", "Sea Elixir", "Super Lucky Elixir", "Token Elixir", "XP Elixir"},
    Multi = true,
    Default = {}
})

local AutoPowerupToggle = Tabs.Extra:AddToggle("AutoPowerups", { Title = "Auto Powerup", Default = false })
local isAutoPowerupEnabled = false

AutoPowerupToggle:OnChanged(function(isEnabled)
    isAutoPowerupEnabled = isEnabled
    if isEnabled then
        coroutine.wrap(function()
            local selectedBuffs = Dropdown.Value
            while isAutoPowerupEnabled do
                ActivateSelectedBuffs(selectedBuffs)
                wait(300) -- Wait for 5 minutes before triggering again
            end
        end)()
    end
end)





local Bosses = game:GetService("ReplicatedStorage").Assets.Bosses
local List = {}
for _, v in pairs(Bosses:GetChildren()) do 
    table.insert(List, v.Name)
end

local previousPosition = nil

local function restorePreviousPosition()
    if previousPosition then
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(previousPosition)
        previousPosition = nil
    end
end

local BossLevelInputs = {} -- Store input fields for each boss level

-- Function to update selected boss and print it
local function UpdateSelectedBoss(selectedBoss)
    selectedBoss = selectedBoss:gsub(" ", "-")
    selectedBoss = selectedBoss:lower()
    print("Selected Boss:", selectedBoss)
end

-- Dropdown to select boss
local Dropdown = Tabs.Bosses:AddDropdown("selectedBoss", {
    Title = "Auto Bosses",
    Values = List,
    Multi = false,
    Default = 1,
    Callback = UpdateSelectedBoss
})

-- Add input fields for boss levels
for _, bossName in ipairs(List) do
    local input = Tabs.Bosses:AddInput("bossLevel_" .. bossName, {
        Title = bossName .. " Level",
        Placeholder = "Enter boss level",
        DefaultValue = "1",
        Numeric = true,
        Finished = true
    })
    BossLevelInputs[bossName] = input
end

-- Toggle to auto respawn bosses
local AutoBossRespawnToggle = Tabs.Bosses:AddToggle("AutoBossesRespawn", {Title = "Auto Respawn Bosses", Default = false })
AutoBossRespawnToggle:OnChanged(function()
    if AutoBossRespawnToggle.Value == true then
        coroutine.wrap(function()
            while AutoBossRespawnToggle.Value == true do 
                local selectedBoss = Dropdown.Value
                local bossLevelInput = BossLevelInputs[selectedBoss]
                local bossLevel = tonumber(bossLevelInput.Value) or 1
                
                previousPosition = game.Players.LocalPlayer.Character:GetPrimaryPartCFrame()
                
                selectedBoss = selectedBoss:gsub(" ", "-")
                selectedBoss = selectedBoss:lower()
                
                local args = {
                    [1] = "RespawnBoss",
                    [2] = selectedBoss,
                    [3] = bossLevel
                }

                game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                
                wait(0.1)
                
                restorePreviousPosition()
            end
        end)()
    end
end)



local Dropdown = Tabs.Farming:AddDropdown("Auto Catch Menu", {
    Title = "Auto Potion Select",
    Description = "Select Pet to Catch",
    Values = {"Common", "Rare", "Epic", "Legendary", "Secret"},
    Multi = false,
    Default = "Common" -- Set a default value
})

local AutoCatchToggle = Tabs.Farming:AddToggle("AutoCatch", {Title = "Auto Catch", Default = false })  
AutoCatchToggle:OnChanged(function()
    while AutoCatchToggle.Value do
        local function getStars(pet)
            local stars = 0
            for _, v in pairs(pet:GetDescendants()) do
                if v.Name == "Stars" then
                    for _, b in pairs(v:GetChildren()) do
                        if b:IsA("ImageLabel") and b.Visible == true then
                            stars = stars + 1
                        end
                    end
                end
            end
            return stars
        end

        local selectedRarity = Dropdown.Value
        for _, v in pairs(workspace.Rendered.Pets.World:GetChildren()) do
            if v:IsA("Model") then
                local petRarity = v.Rarity -- Assuming Rarity is a valid property of the pet models
                local petStars = getStars(v)
                if petStars >= selectedStars and petRarity == selectedRarity then
                    game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer("PetInteraction", v.Name)
                    game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Function"):InvokeServer("CapturePet", v.Name, selectedCube)
                end
            end
        end
        wait(0.1)
    end
end)





Tabs.Main:AddButton({
    Title = "Anti AFK",
    Description = "Press to set yourself in anti AFK",
local function AntiAFK()
    print("Anti AFK activated.")
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end
})

-- Call the Anti AFK function
AntiAFK()


-- Remove the existing dropdown
Tabs.Main:RemoveDropdown("selectedTeleport")

-- Add a new dropdown with teleport functionality
local TeleportDropdown = Tabs.Main:AddDropdown("selectedTeleport", {
    Title = "Teleport to",
    Values = {"Pet Park", "Mellow Meadows", "Auburn Woods", "Frosty Peaks", "Sunset Shores", "Dusty Dunes", "Gloomy Grotto", "Magma Basin", "Hyperwave Arcade"},
    Multi = false,
    Default = 1,
    Callback = function(value)
        local args = {
            [1] = "TeleportBeacon",
            [2] = value, -- Use the selected teleport option
            [3] = "Spawn"
        }
    
        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
    end
})





local Toggle = false -- Initialize Toggle variable outside functions
local FishingLocation = "Pet Park" -- Default fishing location

-- Dropdown menu for selecting fishing location
local FishingLocationDropdown = Tabs.Main:AddDropdown("FishingLocation", {
    Title = "Select Fishing Location",
    Values = {"Pet Park", "Mellow Meadows", "Auburn Woods", "Frosty Peaks", "Sunset Shores", "Dusty Dunes", "Gloomy Grotto", "Magma Basin", "Hyperwave Arcade"},
    Multi = false,
    Default = FishingLocation,
    Callback = function(value)
        FishingLocation = value -- Update fishing location when dropdown value changes
    end
})

-- Function to start fishing
local function StartFishing()
    while Toggle do
        -- Start casting fishing at the selected location
        StartCastFishing:FireServer(FishingLocation)
        wait(3.5) -- Wait for 3.5 seconds for fishing
    end
end

-- Function to toggle auto fishing
local function ToggleAutoFishing()
    Toggle = not Toggle
    if Toggle then
        StartFishing() -- Start auto fishing
    end
end

-- Toggle function
local function ToggleFishing()
    if Toggle then
        Toggle = false -- Turn off auto fishing
    else
        ToggleAutoFishing() -- Turn on auto fishing
    end
end

-- Connect toggle to a UI button or key press
-- Example:
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then -- Change the key to your preference
        ToggleFishing()
    end
end)





-- Define multi dropdown menu for currencies to use
local CurrenciesToUseDropdown = Tabs.Extra:AddDropdown("CurrenciesToUse", {
    Title = "Select Currencies to Use",
    Values = {"Coins", "Tokens", "Items", "Gems"}, -- Placeholder values
    Multi = true,
    Default = {} -- Set default to an empty table
})

-- Define toggle for auto buying from merchants
local AutoBuyToggle = Tabs.Extra:AddToggle("AutoBuy", { Title = "Auto Buy", Default = false })

-- Define multi dropdown menu for items in merchant
local ItemsDropdown = Tabs.Extra:AddDropdown("ItemsToBuy", {
    Title = "Select Items to Buy",
    Values = {"Item1", "Item2", "Item3"}, -- Placeholder values
    Multi = true,
    Default = {} -- Set default to an empty table
})

-- Function to buy items from the selected merchants
local function BuyItems()
    while AutoBuyToggle.Value do
        local selectedMerchants = MerchantsDropdown.Value
        local selectedCurrencies = CurrenciesToUseDropdown.Value -- Use the specific currencies dropdown
        local selectedItems = ItemsDropdown.Value

        -- Iterate over selected merchants
        for _, merchant in pairs(selectedMerchants) do
            -- Iterate over selected currencies
            for _, currency in pairs(selectedCurrencies) do
                -- Iterate over selected items
                for _, item in pairs(selectedItems) do
                    -- Add logic to buy the item using the selected currency from the current merchant
                    print("Buying", item, "from", merchant, "using", currency)
                end
            end
        end
        wait(1) -- Adjust the wait time as needed
    end
end

-- Connect auto buy toggle to buy function
AutoBuyToggle:OnChanged(BuyItems)




-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- Auto Collect Para
Window:SelectTab(1)
Fluent:Notify({
    Title = "Abby Hub Pet Catchers",
    Content = "[⚙️] The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
